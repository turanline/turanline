name: Development workflow

on:
  push:
    branches: [ workflowtest ]
    paths-ignore:
      - '**/README.md'

env:
  NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      gateway: ${{ steps.changes.outputs.gateway }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: changes
      with:
        base: ${{ github.ref_name }}
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
          gateway:
            - 'gateway/**'

  # tests:
  #   name: PEP8 check
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.8
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip 
  #         pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
  #         cd backend/
  #         pip install -r requirements.txt
  #     - name: Test with flake8
  #       run: |
  #         python -m flake8 backend

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/turanline_backend_dev:latest

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        env:
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create env file
        run: |
          echo "NEXT_PUBLIC_URL=${{ env.NEXT_PUBLIC_URL }}" > ./frontend/.env

      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/turanline_frontend_dev:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - changes
    if: ${{ needs.changes.outputs.gateway == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./gateway/
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/turanline_gateway_dev:latest
          build-args: |
            - NEXT_PUBLIC_URL=${{ env.NEXT_PUBLIC_URL }}

  deploy:
    name: Deploying on remote server
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    if: |
      always() && (needs.build_and_push_to_docker_hub.result == 'success' || needs.build_frontend_and_push_to_docker_hub.result == 'skipped') &&
      (needs.build_frontend_and_push_to_docker_hub.result == 'success' || needs.build_frontend_and_push_to_docker_hub.result == 'skipped') &&
      (needs.build_gateway_and_push_to_docker_hub.result == 'success' || needs.build_gateway_and_push_to_docker_hub.result == 'skipped')
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.TEST_HOST }}
        username: ${{ secrets.TEST_USER }}
        password: ${{ secrets.TEST_PASSWORD }}
        source: "docker-compose.test.yml, nginx.test.conf"
        target: "turanline_dev"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.TEST_HOST }}
        username: ${{ secrets.TEST_USER }}
        password: ${{ secrets.TEST_PASSWORD }}
        script: |
          cd turanline_dev
          sudo docker compose -f docker-compose.test.yml pull
          sudo docker compose -f docker-compose.test.yml down
          sudo docker compose -f docker-compose.test.yml up -d

# sudo docker compose -f docker-compose.test.yml exec backend python manage.py migrate
# sudo docker compose -f docker-compose.test.yml exec backend python manage.py collectstatic --no-input
# sudo docker compose -f docker-compose.test.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #   - name: Send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: Деплой foodgram успешно выполнен! Коммит сделал ${{ github.actor }} с сообщением "${{ github.event.commits[0].message }}". Ссылка на коммит https://github.com/${{ github.repository }}/commit/${{github.sha}}.